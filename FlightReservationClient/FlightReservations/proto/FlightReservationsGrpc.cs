// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/flightReservations.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Proto {
  public static partial class FlightService
  {
    static readonly string __ServiceName = "proto.FlightService";

    static readonly grpc::Marshaller<global::Proto.Agency> __Marshaller_proto_Agency = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Agency.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.LoginResponse> __Marshaller_proto_LoginResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.LoginResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Void> __Marshaller_proto_Void = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Void.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Flight> __Marshaller_proto_Flight = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Flight.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.GetByDestAndDateRequest> __Marshaller_proto_GetByDestAndDateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.GetByDestAndDateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Client> __Marshaller_proto_Client = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Client.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.Ticket> __Marshaller_proto_Ticket = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.Ticket.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.UpdateResponse> __Marshaller_proto_UpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.UpdateResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Proto.Agency, global::Proto.LoginResponse> __Method_login = new grpc::Method<global::Proto.Agency, global::Proto.LoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "login",
        __Marshaller_proto_Agency,
        __Marshaller_proto_LoginResponse);

    static readonly grpc::Method<global::Proto.Void, global::Proto.Flight> __Method_getAllFlights = new grpc::Method<global::Proto.Void, global::Proto.Flight>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getAllFlights",
        __Marshaller_proto_Void,
        __Marshaller_proto_Flight);

    static readonly grpc::Method<global::Proto.GetByDestAndDateRequest, global::Proto.Flight> __Method_getByDestAndDate = new grpc::Method<global::Proto.GetByDestAndDateRequest, global::Proto.Flight>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getByDestAndDate",
        __Marshaller_proto_GetByDestAndDateRequest,
        __Marshaller_proto_Flight);

    static readonly grpc::Method<global::Proto.Client, global::Proto.Void> __Method_addClient = new grpc::Method<global::Proto.Client, global::Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "addClient",
        __Marshaller_proto_Client,
        __Marshaller_proto_Void);

    static readonly grpc::Method<global::Proto.Client, global::Proto.Client> __Method_getClientId = new grpc::Method<global::Proto.Client, global::Proto.Client>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getClientId",
        __Marshaller_proto_Client,
        __Marshaller_proto_Client);

    static readonly grpc::Method<global::Proto.Ticket, global::Proto.Void> __Method_saveTicket = new grpc::Method<global::Proto.Ticket, global::Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "saveTicket",
        __Marshaller_proto_Ticket,
        __Marshaller_proto_Void);

    static readonly grpc::Method<global::Proto.Flight, global::Proto.Void> __Method_updateFlightPlaces = new grpc::Method<global::Proto.Flight, global::Proto.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateFlightPlaces",
        __Marshaller_proto_Flight,
        __Marshaller_proto_Void);

    static readonly grpc::Method<global::Proto.Void, global::Proto.UpdateResponse> __Method_notifyAgencies = new grpc::Method<global::Proto.Void, global::Proto.UpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "notifyAgencies",
        __Marshaller_proto_Void,
        __Marshaller_proto_UpdateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Proto.FlightReservationsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FlightService</summary>
    public abstract partial class FlightServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Proto.LoginResponse> login(global::Proto.Agency request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task getAllFlights(global::Proto.Void request, grpc::IServerStreamWriter<global::Proto.Flight> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task getByDestAndDate(global::Proto.GetByDestAndDateRequest request, grpc::IServerStreamWriter<global::Proto.Flight> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Void> addClient(global::Proto.Client request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Client> getClientId(global::Proto.Client request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Void> saveTicket(global::Proto.Ticket request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.Void> updateFlightPlaces(global::Proto.Flight request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Proto.UpdateResponse> notifyAgencies(global::Proto.Void request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FlightService</summary>
    public partial class FlightServiceClient : grpc::ClientBase<FlightServiceClient>
    {
      /// <summary>Creates a new client for FlightService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FlightServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FlightService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FlightServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FlightServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FlightServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Proto.LoginResponse login(global::Proto.Agency request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.LoginResponse login(global::Proto.Agency request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.LoginResponse> loginAsync(global::Proto.Agency request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return loginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.LoginResponse> loginAsync(global::Proto.Agency request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Proto.Flight> getAllFlights(global::Proto.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllFlights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Proto.Flight> getAllFlights(global::Proto.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getAllFlights, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Proto.Flight> getByDestAndDate(global::Proto.GetByDestAndDateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getByDestAndDate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Proto.Flight> getByDestAndDate(global::Proto.GetByDestAndDateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getByDestAndDate, null, options, request);
      }
      public virtual global::Proto.Void addClient(global::Proto.Client request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return addClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Void addClient(global::Proto.Client request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_addClient, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> addClientAsync(global::Proto.Client request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return addClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> addClientAsync(global::Proto.Client request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_addClient, null, options, request);
      }
      public virtual global::Proto.Client getClientId(global::Proto.Client request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getClientId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Client getClientId(global::Proto.Client request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getClientId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Client> getClientIdAsync(global::Proto.Client request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getClientIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Client> getClientIdAsync(global::Proto.Client request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getClientId, null, options, request);
      }
      public virtual global::Proto.Void saveTicket(global::Proto.Ticket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Void saveTicket(global::Proto.Ticket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_saveTicket, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> saveTicketAsync(global::Proto.Ticket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> saveTicketAsync(global::Proto.Ticket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_saveTicket, null, options, request);
      }
      public virtual global::Proto.Void updateFlightPlaces(global::Proto.Flight request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateFlightPlaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.Void updateFlightPlaces(global::Proto.Flight request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateFlightPlaces, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> updateFlightPlacesAsync(global::Proto.Flight request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updateFlightPlacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.Void> updateFlightPlacesAsync(global::Proto.Flight request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateFlightPlaces, null, options, request);
      }
      public virtual global::Proto.UpdateResponse notifyAgencies(global::Proto.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return notifyAgencies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Proto.UpdateResponse notifyAgencies(global::Proto.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_notifyAgencies, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.UpdateResponse> notifyAgenciesAsync(global::Proto.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return notifyAgenciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Proto.UpdateResponse> notifyAgenciesAsync(global::Proto.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_notifyAgencies, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FlightServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FlightServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FlightServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_login, serviceImpl.login)
          .AddMethod(__Method_getAllFlights, serviceImpl.getAllFlights)
          .AddMethod(__Method_getByDestAndDate, serviceImpl.getByDestAndDate)
          .AddMethod(__Method_addClient, serviceImpl.addClient)
          .AddMethod(__Method_getClientId, serviceImpl.getClientId)
          .AddMethod(__Method_saveTicket, serviceImpl.saveTicket)
          .AddMethod(__Method_updateFlightPlaces, serviceImpl.updateFlightPlaces)
          .AddMethod(__Method_notifyAgencies, serviceImpl.notifyAgencies).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FlightServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Agency, global::Proto.LoginResponse>(serviceImpl.login));
      serviceBinder.AddMethod(__Method_getAllFlights, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Proto.Void, global::Proto.Flight>(serviceImpl.getAllFlights));
      serviceBinder.AddMethod(__Method_getByDestAndDate, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Proto.GetByDestAndDateRequest, global::Proto.Flight>(serviceImpl.getByDestAndDate));
      serviceBinder.AddMethod(__Method_addClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Client, global::Proto.Void>(serviceImpl.addClient));
      serviceBinder.AddMethod(__Method_getClientId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Client, global::Proto.Client>(serviceImpl.getClientId));
      serviceBinder.AddMethod(__Method_saveTicket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Ticket, global::Proto.Void>(serviceImpl.saveTicket));
      serviceBinder.AddMethod(__Method_updateFlightPlaces, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Flight, global::Proto.Void>(serviceImpl.updateFlightPlaces));
      serviceBinder.AddMethod(__Method_notifyAgencies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.Void, global::Proto.UpdateResponse>(serviceImpl.notifyAgencies));
    }

  }
}
#endregion
